// Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may not
// use this file except in compliance with the License. A copy of the
// License is located at
//
// http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Usage:
// go run riputil-gen.go
package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"path/filepath"
	"strings"
	"time"

	"github.com/aws/amazon-ssm-agent/agent/jsonutil"
)

const (
	ripConfigJsonFile = "rip_static_config.json"
	ripUtilFile       = "riputil.go"
	startMarker       = "//AUTOGEN_START"
	endMarker         = "//AUTOGEN_END"
	serviceName       = "s3"
)

// riputil-gen is a simple program that generates the riputil file,
// riputil file contains information about S3 endpoints
func main() {
	var ripConfig AutoGeneratedRipConfigSchema
	if err := jsonutil.UnmarshalFile(filepath.Join("agent", "s3util", ripConfigJsonFile), &ripConfig); err != nil {
		fmt.Printf("Error in opening/parsing RIP config file %v\n", err)
		return
	}
	var newContent bytes.Buffer
	for i, region := range ripConfig.Regions {
		for _, service := range ripConfig.Regions[i].Services {
			if service.Name == serviceName {
				newContent.WriteString("\"" + region.RegionName + "\" :\t\"" + service.Endpoint + "\",\n")
			}
		}
	}
	if err := replaceFileContents(newContent.String()); err != nil {
		fmt.Printf("Error in updating the riputil file %v\n", err)
	}
}

func replaceFileContents(newContent string) (err error) {
	if oldContent, err := ioutil.ReadFile(filepath.Join("agent", "s3util", ripUtilFile)); err == nil {
		parts := strings.Split(string(oldContent), startMarker)
		oldContentPart1 := parts[0]
		moreParts := strings.Split(string(parts[1]), endMarker)
		oldContentPart2 := moreParts[1]
		fileNewContent := oldContentPart1 + startMarker + "\n" + newContent + endMarker + oldContentPart2
		err = ioutil.WriteFile(filepath.Join("agent", "s3util", ripUtilFile), []byte(fileNewContent), 0644)
	}
	return
}

// Auto generated using https://mholt.github.io/json-to-go/
type AutoGeneratedRipConfigSchema struct {
	Regions []struct {
		AccessibilityAttributes []string `json:"accessibility_attributes"`
		AirportCode             string   `json:"airport_code"`
		TimeZoneID              string   `json:"time_zone_id"`
		GeolocationData         struct {
			City        string `json:"city"`
			CountryCode string `json:"country_code"`
			RegionCode  string `json:"region_code"`
		} `json:"geolocation_data"`
		AvailabilityZones []struct {
			Name     string `json:"name"`
			Services []struct {
				Name        string `json:"name"`
				EndpointMap struct {
				} `json:"endpoint_map"`
				SdkLongName       string   `json:"sdk_long_name"`
				Alias             string   `json:"alias"`
				VendorCode        string   `json:"vendor_code"`
				LongName          string   `json:"long_name"`
				Description       string   `json:"description"`
				PossibleStatuses  []string `json:"possible_statuses"`
				Protocols         []string `json:"protocols"`
				Endpoint          string   `json:"endpoint"`
				SignatureVersions []int    `json:"signature_versions"`
				CustomProperties  struct {
					SdkAttributes       string `json:"sdk_attributes"`
					RegionBuildCategory string `json:"region_build_category"`
					RegionBuildType     string `json:"region_build_type"`
					RegionBuildItem     string `json:"region_build_item"`
				} `json:"custom_properties"`
				Visibility               string        `json:"visibility"`
				Category                 string        `json:"category"`
				Type                     string        `json:"type"`
				Item                     string        `json:"item"`
				AvailabilityLevel        []string      `json:"availability_level"`
				SdkName                  string        `json:"sdk_name,omitempty"`
				ComponentServices        []interface{} `json:"component_services"`
				InternalAvailabilityDate interface{}   `json:"internal_availability_date"`
				LaunchDate               interface{}   `json:"launch_date"`
				Status                   string        `json:"status"`
				HostTypes                struct {
					FixedHosts        []interface{} `json:"fixed_hosts"`
					InternalInstances []string      `json:"internal_instances"`
					ExternalInstances []string      `json:"external_instances"`
				} `json:"host_types,omitempty"`
			} `json:"services"`
			Types struct {
				PROD struct {
					Name   string `json:"name"`
					Status string `json:"status"`
				} `json:"PROD"`
				EXTERNALEC2 struct {
					Name   string `json:"name"`
					Status string `json:"status"`
				} `json:"EXTERNAL_EC2"`
			} `json:"types"`
			Type        []string `json:"type"`
			Status      string   `json:"status"`
			Datacenters []string `json:"datacenters"`
			BuildOrder  int      `json:"build_order"`
		} `json:"availability_zones"`
		LaunchDate           time.Time `json:"launch_date"`
		BillingPrefix        string    `json:"billing_prefix"`
		CodeName             string    `json:"code_name"`
		ProdHostTypes        []string  `json:"prod_host_types"`
		RegionLongName       string    `json:"region_long_name"`
		RegionName           string    `json:"region_name"`
		Status               string    `json:"status"`
		UsageTypePrefix      string    `json:"usage_type_prefix"`
		LocalizedRegionNames struct {
			En string `json:"en"`
			Fr string `json:"fr"`
			Ja string `json:"ja"`
			Zh string `json:"zh"`
		} `json:"localized_region_names"`
		ArnPartition         string `json:"arn_partition"`
		BackendVipZone       string `json:"backend_vip_zone"`
		BvpcLocation         string `json:"bvpc_location"`
		Domain               string `json:"domain"`
		InfraFrontendVipZone string `json:"infra_frontend_vip_zone"`
		PublicDNSSuffix      string `json:"public_dns_suffix"`
		Services             []struct {
			Name        string `json:"name"`
			EndpointMap struct {
			} `json:"endpoint_map"`
			SdkLongName       string   `json:"sdk_long_name"`
			Alias             string   `json:"alias"`
			VendorCode        string   `json:"vendor_code"`
			LongName          string   `json:"long_name"`
			Description       string   `json:"description"`
			PossibleStatuses  []string `json:"possible_statuses"`
			Protocols         []string `json:"protocols"`
			Endpoint          string   `json:"endpoint"`
			SignatureVersions []int    `json:"signature_versions"`
			CustomProperties  struct {
				LocationConstraint  string `json:"location_constraint"`
				RegionBuildCategory string `json:"region_build_category"`
				RegionBuildType     string `json:"region_build_type"`
				RegionBuildItem     string `json:"region_build_item"`
				SdkAttributes       string `json:"sdk_attributes"`
			} `json:"custom_properties"`
			Visibility               string        `json:"visibility"`
			Category                 string        `json:"category"`
			Type                     string        `json:"type"`
			Item                     string        `json:"item"`
			AvailabilityLevel        []string      `json:"availability_level"`
			SdkName                  string        `json:"sdk_name,omitempty"`
			ComponentServices        []interface{} `json:"component_services"`
			InternalAvailabilityDate interface{}   `json:"internal_availability_date"`
			LaunchDate               interface{}   `json:"launch_date"`
			Status                   string        `json:"status"`
			HostTypes                struct {
				FixedHosts        []interface{} `json:"fixed_hosts"`
				InternalInstances []string      `json:"internal_instances"`
				ExternalInstances []string      `json:"external_instances"`
			} `json:"host_types,omitempty"`
		} `json:"services"`
		StandardFrontendVipZone string `json:"standard_frontend_vip_zone"`
		SubstrateDNSSuffix      string `json:"substrate_dns_suffix"`
		VpcDNSDomainSuffix      string `json:"vpc_dns_domain_suffix"`
	} `json:"regions"`
}
