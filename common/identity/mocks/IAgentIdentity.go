// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	credentials "github.com/aws/aws-sdk-go/aws/credentials"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// IAgentIdentity is an autogenerated mock type for the IAgentIdentity type
type IAgentIdentity struct {
	mock.Mock
}

// AvailabilityZone provides a mock function with given fields:
func (_m *IAgentIdentity) AvailabilityZone() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AvailabilityZoneId provides a mock function with given fields:
func (_m *IAgentIdentity) AvailabilityZoneId() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Credentials provides a mock function with given fields:
func (_m *IAgentIdentity) Credentials() *credentials.Credentials {
	ret := _m.Called()

	var r0 *credentials.Credentials
	if rf, ok := ret.Get(0).(func() *credentials.Credentials); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credentials.Credentials)
		}
	}

	return r0
}

// GetServiceEndpoint provides a mock function with given fields: _a0
func (_m *IAgentIdentity) GetServiceEndpoint(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IdentityType provides a mock function with given fields:
func (_m *IAgentIdentity) IdentityType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InstanceID provides a mock function with given fields:
func (_m *IAgentIdentity) InstanceID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceType provides a mock function with given fields:
func (_m *IAgentIdentity) InstanceType() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Region provides a mock function with given fields:
func (_m *IAgentIdentity) Region() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShortInstanceID provides a mock function with given fields:
func (_m *IAgentIdentity) ShortInstanceID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAgentIdentity creates a new instance of IAgentIdentity. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAgentIdentity(t testing.TB) *IAgentIdentity {
	mock := &IAgentIdentity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
